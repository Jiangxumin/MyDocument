
创建SSH Key：
ssh-keygen -t rsa -C "youremail@example.com"
～/.ssh/id_rsa.pub


------------------------------------------------------------------
echo "# xxxx" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:Jiangxumin/xxxx.git    关联
git push -u origin master     第一次推送
------------------------------------------------------------------

git push origin master  推送


git修改提交的用户名和Email：  http://blog.chinaunix.net/uid-26997997-id-3231891.html
全局修改：
	git config --global user.name "Your Name"
	git config --global user.email you@example.com
	全局的通过vim ~/.gitconfig来查看

局部，当前仓储
	git config user.name "Your Name"
	git config user.email you@example.com
	局部的通过当前路径下的 .git/config文件来查看


git init

-------------------------------------------------------------------------------------------------------------------------------
git add
	git add <filename>  添加到 版本库
	git add .   Git会递归地将你执行命令时所在的目录中的所有文件添加上去，所以如果你将当前的工作目录作为参数，它就会追踪那儿的所有文件
	git add -u  使用-u参数调用了git add命令，会将本地有改动（包括删除和修改）的已经追踪的文件标记到暂存区中。
	git add -A  使用-A参数会将添加所有改动的已跟踪文件和未跟踪文件。
	git add -i  交互式的方式进行添加。
-------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------
git commit -m "描述"   提交
	git commit --amend      修补式提交。
	git commit --a          对本地所有变更的文件执行提交操作，包括对本地修改的文件和删除的文件，但是不包括未被版本库跟踪的文件。
				但是这个命令最好不要使用，这样会丢掉Git暂存区带给用户的最大好处：对提交内容进行控制的能力
	git commit --allow-empty    允许执行空白提交
------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------
git status
	git status，   查看你的代码在缓存与当前工作目录的状态
	git status -s，将结果以简短的形式输出 
---------------------------------------------------------

-------------------------------------------------------------
git reset --hard HEAD     回退最后一次提交的版本  
git reset --hard HEAD^      
git reset --hard HEAD~100
git reset --hard     commit_id  指定commit_ID回退
--------------------------------------------------------------

git reflog

git rm 文件名

------------------------------------------------------------------------------------------------------------
git branch 查看分支

git branch dev   \
		  | ==>  git checkout -b dev  创建分支
git checkout dev /
 

git branch   				显示当前所在的分支
git branch <branchname>   		创建新的分支branchname
git branch <branchname> <start-point>	基于提交<start-point>创建新分支，新分支的分支名为<branchname>
git branch -d <branchname> 		删除名称为branchname的分支，删除时会检查所有的删除分支是否已经合并到其他分支，否则拒绝删除
git branch -D <branchname>		强制删除分支<branchname>
git branch -m <oldbranch> <newbranch>	重命名分支
---------------------------------------------------------------------------------------------------------------

git checkout
git checkout branchname		，会改变HEAD头指针，主要用于切换分支
git checkout -b branchname	，用于创建一个新的分支，并且切换到创建的新的分支上

git checkout --filename		，用暂存区中的filename文件来覆盖工作区中的filename文件
git checkout <commit> --filename，用指定提交中的文件覆盖暂存区和工作区中对应的文件
git checkout -- .或者git checkout .	，用暂存区的所有文件直接覆盖本地文件，取消所有的本地的修改，是一条危险的操作

------------------------------------------------------------------------------------------------
git merge dev     合并dev到当前

------------------------------------------------------------------
git log
	git log --oneline，可以显示更加短小的提交ID.
	git log --graph，显示何时出现了分支和合并等信息.
	git log --pretty=raw，显示提交对象的parent属性.
	git log --graph --pretty=oneline --abbrev-commit 查看分支
-----------------------------------------------------------------
git branch -d dev  删除分支

------------------------------------------------------------
git diff
	git diff，显示工作区和暂存区的差异
	git diff HEAD，显示工作区和HEAD之间的差异
	git diff --cached，显示暂存区和HEAD之间的差异
	git diff id1 id2，显示两次提交之间的差异
------------------------------------------------------------

---------------------------------------------------------------
删除本地多余的目录和文件
	git clean -nd，显示要删除的内容，但是是预删除（仅仅是显示）
	git clean -fd，强制删除多余的文件和目录
----------------------------------------------------------------


--------------------------------------------------------------
git diff           ，显示工作区和暂存区的差异
git diff HEAD      ，显示工作区和HEAD之间的差异
git diff --cached  ，显示暂存区和HEAD之间的差异
git diff id1 id2   ，显示两次提交之间的差异
--------------------------------------------------------------


==============================================================================================================
克隆到本地：
git clone git@github.com:Jiangxumin/xxx.git 
git clone git@192.168.1.22:cmobile/cavp.git


	git push origin master  推送
	git pull  		抓取  = git fetch origin develop:tmp  +  git merge tmp + git branch -d tmp
	git fetch origin develop:tmp
=============================================================================================================

Git命令详解（一）-个人使用 csdn
http://blog.csdn.net/magicharvey/article/details/12431867?utm_source=tuicool&utm_medium=referral#t1

git修改提交的用户名和Email
http://blog.chinaunix.net/uid-26997997-id-3231891.html


分支管理： http://codingnow.cn/version/228.html


1. git分支简介

使用分支可以让你从开发主线上分离开来，然后在新的分支上解决特定问题，同时不会影响主线。像其它的一些版本控制系统，创建分支需要创建整个源代码目录的副本。而Git 的分支是很轻量级的，因为Git保存的不是文件差异，而是一系列文件快照。在Git提交时，会保存一个commit对象，该对象包含一个指向暂存内容快照的指针，Git 会先计算每一个子目录的校验和（ SHA-1 哈希字串），然后在 Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。Git 中的分支，其实本质上是个指向 commit 对象的可变指针，Git 会使用 master 作为分支的默认名字，它在每次提交的时候都会自动移动，指向最后一次提交对象。Git使用一个名为HEAD的指针，指向你正在工作的本地分支，这样你就可以知道当前在哪个分支下面工作。

2. 创建分支
	
git branch dev

上面操作会在当前的commit对象上新建一个名为dev的分支指针，但是仅仅是创建了该分支，并没有切换到dev分支，此时你还在master分支。

3. 切换分支
	
git checkout dev

此时切换到了新建的dev分支，即HEAD指向了dev分支。
ps:可以加上-b参数
	
git checkout -b dev

相当于执行
	
git branch dev
git checkout dev

现在我们在当前目录下进行下面的操作：
	
vim test.py
git add test.py
git commit -m "add test.py"

我们在当前目录下新建了test.py文件，并添加到本地仓库，注意：现在dev分支移动了一格，而master分支还指向原来的commit对象，test.py文件只属于dev分支，master分支并没有该文件。
现在切换到master分支
	
git checkout master

可以看到当前目录下是没有test.py文件的。因为Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照，它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。
4. 合并分支

使用dev分支完成一些需求后，需要回到开发主线把它合并到master分支。
	
git merge dev

ps:需切换到master分支
合并时出现了“Fast-forward”的提示，因为当前master分支所在的提交对象是要并入的分支dev的直接上游，换句话说，如果顺着一个分支直走下去可以到达另一分支的话，合并两者时不存在任何需要解决的分歧，只需简单的移动指针，这种合并过程称为“Fast-forward”。如果当前master分支所指向的提交对象不是dev分支的直接祖先，Git需要做一些额外处理，Git会用两个分支的末端和它们的共同祖先进行一次简单的三方合并，并做一个新的快照，自动创建一个指向它的提交对象。这个对象有两个祖先，即之前两个分支的末端。合并之后，dev分支和master分支指向同一位置，master分支指向的提交对象就是最新的修改了。

如果不同分支修改了同一文件，合并时可能会遇到冲突，此时Git做了合并，但是并没有提交。使用git status查看哪些文件发生了冲突。解决了所有的冲突后，执行git add将它们添加到暂存区域，因为一旦暂存就表示冲突已解决，然后使用git commit完成这次合并的提交。
5. 删除分支
	
git branch -d dev
6. 分支管理

6.1 列出当前所有分支的清单
	
git branch
 
dev
* master

master分支前的*字符：表示当前所在的分支。

6.2 查看各个分支最后一个提交对象的信息

	
git branch -v
 
dev [7e90b1 add helloworld.java
* master c7e90b1 [ahead 1] add helloworld.java

6.3 查看已经与当前分支合并的分支
	
git branch --merged
 
dev
* master

6.4 查看已经与当前分支未合并的分支
	
git branch --no-merged
7. 远程分支

7.1 查看远程分支
	
git branch -r
 
origin/HEAD -> origin/master
origin/master

7.2 创建远程分支
即把本地分支推送到远程
	
git push origin dev
git branch -r
 
origin/HEAD -> origin/master
origin/dev
origin/master

看到已把dev分支成功push到服务器上

7.3 同步远程服务器上的数据到本地
	
git fetch origin

7.4 跟踪远程分支
从远程拉取dev分支到本地，并切换到dev分支,ps:需要git1.6.2以上版本
	
git checkout --track origin/dev

从远程拉取dev分支到本地,命名为develop，并切换到develop分支
	
git checkout -b develop origin/dev

7.5 提交本地分支数据到远程服务器
git push origin local:remote
	
git push origin dev:dev

如果当前是在dev分支下工作，可直接git push

7.6 删除远程分支
	
git push origin :dev
8. 分支的衍合

把一个分支整合到另一个分支有两种方法：merge和rebase（衍合）
前面已经介绍过，merge是把两个分支最新的快照和二者最新的共同祖先进行三方合并，产生一个新的提交对象。rebase是回到两个分支的共同祖先，根据要进行衍合的分支dev的历次提交对象，生成一系列文件补丁，然后以主干分支master的最后一个提交对象为新的出发点，逐个应用dev分支准备好的补丁文件，生成一个新的提交对象，改写dev的提交历史，使dev成为master的直接下游。然后回到master分支，进行一次快进合并。这样能够保持更加清晰的提交记录，就像没有使用过分支一样。
	
git checkout dev
git rebase master

ps:可以把衍合当作一种在推送之前清理提交历史的手段，如果分支中的提交对象已经发布到服务端，就千万不要对该分支进行衍合。
